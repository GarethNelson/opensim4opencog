#description of botvars

= Introduction =

Cogbot is composed of a number of interacting plugins (yay, we love plugins!). The primary semantic way of interchanging information among plugins is botvars.


== Using botvars from prolog ==

These are working examples

(All three hook predicates start in the module *bv*)

They may be registered from any module merely by including them in the source files like below as long as they use the module prefix bv:  (hook_botvar2/3 is in the current context module)

NS (or NameSpace) is called with the BotID reference of the caller bot.

{{{
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BOTVAR EXAMPLE: Dynamic predicates 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:-dynamic(hook_botvar2/2).
hook_botvar2(_,"a",1).
hook_botvar2(_,"b",2).

bv:hook_botvar_get(_BotID,NS,Key,Value):-hook_botvar2(NS,Key,Value).
bv:hook_botvar_set(_BotID,NS,Key,Value):-retractall(hook_botvar2(NS,Key,_)),assert(hook_botvar2(NS,Key,Value)).
bv:hook_botvar_key(_BotID,NS,Key):-hook_botvar2(NS,Key,_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BOTVAR EXAMPLE: Set up sitting on ground based botvar (Side effect based example)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
bv:hook_botvar_get(BotID,NS,Key,Value):-botkey_same(NS,Key,'isSittingGround'),!,
   wbotget(BotID,['Self','Movement','SitOnGround'],Result), (cli_is_true(Result)-> Value="Yes" ; Value="No").

bv:hook_botvar_set(BotID,NS,Key,Value):-botkey_same(NS,Key,'isSittingGround'),!,
   (Value="Yes" -> wbotcall(BotID,['Self','SitOnGround'],_) ; botcall(['Self','StandUp'],_)).

bv:hook_botvar_key(_,_,'isSittingGround').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BOTVAR EXAMPLE: set up a isNight (readonly based example)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:-dynamic isNight/0.

bv:hook_botvar_get(BotID,NS,Key,Value):-botkey_same(NS,Key,'isNight'),!, ( isNight -> Value="Yes" ; Value="No").

bv:hook_botvar_set(BotID,NS,Key,Value):-botkey_same(NS,Key,'isNight'),!, 'format'(user_error,'Someone request isNight=~w~n',Value).

bv:hook_botvar_key(_,_,'isNight').

}}}
== using botvars from botcmd ==


== Command output of //botvars --vars ==
{{{
[12:30] Success: fromprolog.a .1 = 1
[12:30] Success: fromprolog.b .1 = 2
[12:30] Success: otopopo_dougstribe.selected .Count == 0
[12:30] Success: otopopo_dougstribe.accounts .1 = Otopopo Dougstribe
[12:30] Success: otopopo_dougstribe.accounts .2 = Douglas Miles
[12:30] Success: otopopo_dougstribe.accounts .3 = Dogbert Miles
[12:30] Success: otopopo_dougstribe.accounts .4 = Anniebot Ogborn
[12:30] Success: otopopo_dougstribe.accounts .5 = Anne Ogborn
[12:30] Success: otopopo_dougstribe.accounts .Count == 7
[12:30] Success: otopopo_dougstribe.master .1 = Douglas Miles
[12:30] Success: otopopo_dougstribe.self .1 = Otopopo Dougstribe
[12:30] Success: otopopo_dougstribe.regionprims .1 = Otopopo Dougstribe
[12:30] Success: otopopo_dougstribe.regionprims .2 = Douglas Miles
[12:30] Success: otopopo_dougstribe.regionprims .3 = bowl2 Torus 90cbb984-00c3-4ed0-8d27-bbb61b63d3f9 (localID 2944258497)(ch0)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](!IsPassable)(hollow 0.99)
[12:30] Success: otopopo_dougstribe.regionprims .4 = Primitive Cylinder 6a9e9cb7-05ad-4d20-9660-49c598775c84 (localID 2944258471)(ch0)(PrimFlagsTrue Scripted)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](!IsPassable)
[12:30] Success: otopopo_dougstribe.regionprims .5 = Primitive Cylinder 55596f84-05ee-42c6-b46d-41861d902c73 | Listening on 100
touch to stop (localID 2944258470)(ch0)(PrimFlagsTrue Scripted, Touch)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](IsTouchDefined)(!IsPassable)
[12:30] Success: otopopo_dougstribe.regionprims .Count == 454
[12:30] Success: otopopo_dougstribe.allprims .1 = Otopopo Dougstribe
[12:30] Success: otopopo_dougstribe.allprims .2 = Douglas Miles
[12:30] Success: otopopo_dougstribe.allprims .3 = bowl2 Torus 90cbb984-00c3-4ed0-8d27-bbb61b63d3f9 (localID 2944258497)(ch0)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](!IsPassable)(hollow 0.99)
[12:30] Success: otopopo_dougstribe.allprims .4 = Primitive Cylinder 6a9e9cb7-05ad-4d20-9660-49c598775c84 (localID 2944258471)(ch0)(PrimFlagsTrue Scripted)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](!IsPassable)
[12:30] Success: otopopo_dougstribe.allprims .5 = Primitive Cylinder 55596f84-05ee-42c6-b46d-41861d902c73 | Listening on 100
touch to stop (localID 2944258470)(ch0)(PrimFlagsTrue Scripted, Touch)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](IsTouchDefined)(!IsPassable)
[12:30] Success: otopopo_dougstribe.allprims .Count == 742
[12:30] Success: otopopo_dougstribe.selfknownprims .1 = Atmosphere Tube bb12f9bc-1273-4005-934d-cbc167011a60 | 0.780000 (localID 2944258688)(ch0)(PrimFlagsTrue Scripted, Touch)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](IsTouchDefined)(!IsPassable)
[12:30] Success: otopopo_dougstribe.selfknownprims .2 = Primitive Box c3ef7796-b41f-4107-9dd0-8aac2544ce26 | 0.680000 (localID 2944258692)(ch0)(PrimFlagsTrue Scripted, Touch)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](IsTouchDefined)(!IsPassable)
[12:30] Success: otopopo_dougstribe.selfknownprims .3 = yuppie skirt Torus a2ad0a23-c1f3-40a9-9a04-3ad57157321c (localID 2944259031)(childs 8)(PrimFlagsTrue Phantom)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[]
[12:30] Success: otopopo_dougstribe.selfknownprims .4 = Douglas Miles
[12:30] Success: otopopo_dougstribe.selfknownprims .5 = Primitive Cylinder 6a9e9cb7-05ad-4d20-9660-49c598775c84 (localID 2944258471)(ch0)(PrimFlagsTrue Scripted)(PrimFlagsFalse InventoryEmpty, ObjectOwnerModify)[](!IsPassable)
[12:30] Success: otopopo_dougstribe.selfknownprims .Count == 207
[12:30] botvar: Success: otopopo_dougstribe.lasteventprim= NULL
[12:30] Success: otopopo_dougstribe.selectedobjects .Count == 0
[12:30] Success: otopopo_dougstribe.favfood .1 = corn
[12:30] botvar 0 failures and 32 successes
[12:30] botvar 0 failures and 32 successes
}}}


== AIML botvars ==

AIML users will be familiar with get and set. Get and set are used to record information about the user during an interaction- e.g. 

bot: what is your favorite movie?
user: it is Castaway On The Moon
bot: I haven't seen Castaway On The Moon

The bot remembers the user's favorite movie via the set tag in AIML, defined in [http://www.alicebot.org/TR/2001/WD-aiml/#section-set AIML 1.0.1 spec, section 7.4.1], which looks like

{{{
<set name="favorite_movie" >
}}}

and recovers it via the [http://www.alicebot.org/TR/2001/WD-aiml/#section-get get tag], so the category might look like

{{{
<category>
   <pattern>_ is <set name="favorite_movie">*</set></pattern>
   <template>I haven't seen <get name="favorite_movie" /></template>
</category>
}}}

(Note that we also could have used the `<that />` tag, but this is an example) 

Notice that favorite_movie refers to the user's favorite movie. If we have several users we might need to keep separate name spaces for them. 
Fortunately, Cogbot's AIMLbot keeps a separate "dictionary" for each user. The set and get tags use the dictionary called 'user' by default. This dictionary matches the AV who made the request.

We might also want to store information about the bot itself. For example, suppose we want a bot to be able to remember the flavor of the day. So one user can tell the bot the flavor of the day, and another ask about it. The bot itself has a dictionary.



This of course has the user's name hard coded, a deficiency we'll correct in a moment.

We might also want to record information about the bot itself. This is done in the dictionary 'bot'. AIML contains a shorthand equivilent `<bot name="foo" />`  for `<get dict="bot" name="foo" />`. The dictionary 'user' is the default dict.

Cogbot botvars are effectively AIML vars. So, for example, we can introduce the bot's master's name with   `<get dict="
<bot dict="$you"..> == <get ..>
<bot..> == <get dict="bot" ..>

of course we're more likely to want to store 

now explain how bot is slightly different

dict="user"   dict="bot"

dict and user names

dict and bot names

world name space

world/local bots

$somedict.somesubdict.somevar

every request in aiml has local dictionary, which is the name of the person making the request to the bot (usually the person who spoke to the bot).  


name with dot doesn't use local dictionary

$vars allowed anywhere in aiml


== Cogbot defined botvars ==

you  - author of current request (the bot may be both 'user' and 'bot')

selected - set of currently selected objects

accounts - all known accounts, logged on or not

master - this bot's master(s)  (might have more than one)

self - the current bot
regionprims - list of all av's, attachments, and objects in this region
              used in "moveprim $regionprims <0,0,-1>
allprims - list of all av's, attachments, and objects known to system
selfknownprims - list of all objects that have an affordance or
                 makes sense for the bot to know about

lasteventprim - the 'current object' - the current object is
                determined in a complex way but is generally the last
                object acted upon by the av.
                Can be changed by AIML or other plugins.
                if the bot's head is free (not being animated)
                it will look at target


== botvars in the default AIML files ==

[http://code.google.com/p/opensim4opencog/source/browse/data-chatbot/alicebot/config/bot.xml here they are]


= Registering Botvars with prolog =

decleare the botvar predicate
{{{
:-dynamic(oto_impl/2).
}}}
create a arity 1 version to gather the keys
{{{
oto_impl(N):-oto_impl(N,_).
}}}
declare some values in arity 2 predicate
{{{
oto_impl("favfood",corn).
}}}
Register the arity 2 version
{{{
:-bot_add_varpred(oto_impl).
}}}

This will export "favfood" var to AIML and other modules

change the value
{{{
:-bot_setvar("favfood",bread).
}}}

retrieve the value 
{{{
:-bot_getvar("favfood",What).
}}}