<META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="MSHTML 6.00.6000.16890" name=GENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=#ffffff background="">
<DIV><BR>-----------------------------------------------------------------------------------------------------------------------------------------------------<BR>[the, 
shopper, drank, the, pepsi]<BR>(thereExists ?shopper4675 <BR>  (and (isa 
?shopper4675 (FrequentPerformerFn Shopping ) ) <BR>   (thereExists 
?pepsi6 <BR>     (and (isa ?pepsi6 PepsiCola ) 
<BR>     (and (occursDuring ?drank7550 Past ) 
<BR>     (and (isa ?drank7550 DrinkingEvent ) 
<BR>     (performedBy ?drank7550 ?shopper4675 ) 
<BR>     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) ) 
)       
<BR>                                                  
<BR>[the, shopper, drinks, the, pepsi]<BR>(thereExists ?shopper4675 <BR>  
(and (isa ?shopper4675 (FrequentPerformerFn Shopping ) ) <BR>   
(thereExists ?pepsi6 <BR>     (and (isa ?pepsi6 PepsiCola ) 
<BR>     (and (occursDuring ?drank7550 Now ) 
<BR>     (and (isa ?drank7550 DrinkingEvent ) 
<BR>     (performedBy ?drank7550 ?shopper4675 ) 
<BR>     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) ) 
)                           
<BR><BR>[the, shopper, bought, fries]<BR>(thereExists ?shopper4794 
<BR>   (and (isa ?shopper4794 (FrequentPerformerFn Shopping ) ) 
<BR>   (and (and (isa ?fries20 Frying ) <BR>   
(objectOfStateChange ?fries20 ?POSSESSOR13610 ) ) <BR>   (and 
(occursDuring ?bought3 Past ) <BR>   (and (isa ?bought3 Buying ) 
<BR>   (buyer ?bought3 ?shopper4794 ) <BR>   (objectPaidFor 
?bought3 ?fries20 ) ) ) ) ) )<BR><BR>[the, shopper, bought, fries, with, his, 
pepsi]<BR>(thereExists ?shopper4863 <BR>    (and (isa 
?shopper4863 (FrequentPerformerFn Shopping ) ) <BR>    (and (isa 
?pepsi42 PepsiCola ) <BR>    (and (and (and (isa ?fries103 Frying 
) <BR>       (objectOfStateChange ?fries103 
?POSSESSOR13613 ) ) <BR>    (and (isa ?bought4 Buying ) (seller 
?bought4 ?shopper4863 ) <BR>    (objectPaidFor ?bought4 ?fries103 
) <BR>    (buyingPerformer ?bought4 ?pepsi42 ) ) ) 
<BR>    (equals ?POSSESSOR13613 
<BR>            (OneOfFn 
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr 
PossessivePronoun-Post ) 
<BR>             
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr 
PossessivePronoun-Pre ) ) ) <BR>    (controls (OneOfFn (PronounFn 
ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Post ) 
<BR>                           
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr 
PossessivePronoun-Pre ) 
)<BR>                   
?pepsi42 ) ) ) ) )<BR><BR><BR><BR>|    english2Kif("I see 
you").<BR>assert(known_phrase(verbSemTrans(#$and(#$isa(?ACTION1, 
#$VisualPerception), #$pe<BR>rformedBy(?ACTION1, ?Speaker), 
#$perceivedThings(?ACTION1, ?TargetAgent)), true)<BR>))<BR><BR><BR>e2c("George 
fell last year").<BR><BR>[[txt, 'George'], [tag, staart, nnp, np]]<BR>[[txt, 
fell], [tag, z, vbd]]<BR>[[txt, last], [tag, z, jj, ap, 'Adjective', 'Adverb', 
'CountNoun', 'WHAdverb']]<BR>[[txt, year], [tag, laast, nn, 
'CountNoun']]<BR><BR>seg([p('VP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4)])<BR><BR>(implies <BR>  
(equals ?GEORGE2 <BR>    (OneOfFn 
EddieGeorge-FootballPlayer-American <BR>      
(CityNamedFn "George" RepublicOfSouthAfrica ) ) ) <BR>  (and 
<BR>    (isa ?FELL1 Event ) <BR>    (implies 
<BR>      (and 
<BR>        (isa ?YEAR5 CalendarYear ) 
<BR>        (isa ?YEAR5 ContemporaryArtifact 
) ) <BR>      (or 
<BR>        (and 
<BR>          (isa ?FELL1 
CuttingDownATree ) <BR>          
(objectOfStateChange ?FELL1 ?YEAR5 ) 
<BR>          (doneBy ?FELL1 
?GEORGE2 ) ) <BR>        (and 
<BR>          (organismKilled 
?FELL1 ?YEAR5 ) <BR>          (isa 
?FELL1 CuttingDownATree ) 
<BR>          (performedBy ?FELL1 
?GEORGE2 ) ) ) ) ) )<BR><BR><BR><BR>e2c("I see you").<BR><BR>[[txt, 'I'], [tag, 
staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, see], [tag, z, vb]]<BR>[[txt, you], 
[tag, laast, ppss, ppo, prp, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR><BR>seg([p('ADVP_non_cyclic', 
1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 
3)])<BR><BR>(thereExists ?SPEAKER <BR>  (and <BR>    (isa 
?SPEAKER Person ) <BR>    (and <BR>      
(isa ?SEE1 Event ) <BR>      (thereExists ?TARGETAGENT 
<BR>        (and 
<BR>          (isa ?TARGETAGENT 
Person ) <BR>          (or 
<BR>            (awareOf 
?SPEAKER ?TARGETAGENT ) 
<BR>            (and 
<BR>              
(isa ?SEE1 VisualPerception ) 
<BR>              
(performedBy ?SEE1 ?SPEAKER ) 
<BR>              
(perceivedThings ?SEE1 ?TARGETAGENT ) ) ) ) ) ) ) )<BR><BR>e2c("I seen the 
wood").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, seen], [tag, z, vbn]]<BR>[[txt, a], [tag, z, dt, at, 
'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, wood], [tag, laast, nn, 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR><BR>seg([p('ADVP_non_cyclic', 
1, 1), p('VP_non_cyclic', 2, 2), p('QP', 3, 4)])<BR><BR>(thereExists ?SPEAKER 
<BR>  (and <BR>    (isa ?SPEAKER Person ) 
<BR>    (and <BR>      (isa ?SEEN1 Event 
) <BR>      (thereExists ?WOOD5 
<BR>        (and 
<BR>          (isa ?WOOD5 
<BR>            (OneOfFn 
Wood Wood-GolfClub WoodedArea ) ) 
<BR>          (or 
<BR>            (awareOf 
?SPEAKER ?WOOD5 ) 
<BR>            (and 
<BR>              
(isa ?SEEN1 VisualPerception ) 
<BR>              
(performedBy ?SEEN1 ?SPEAKER ) 
<BR>              
(perceivedThings ?SEEN1 ?WOOD5 ) ) ) ) ) ) ) )<BR><BR>e2c("I sawed the 
wood").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, sawed], [tag, z, 'NLWordForm', 'Verb', 
'Adjective']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, wood], [tag, laast, nn, 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR><BR><BR>(thereExists ?SPEAKER <BR>  
(and <BR>    (isa ?SPEAKER Person ) <BR>    (and 
<BR>      (isa ?SAWED1 Event ) 
<BR>      (thereExists ?WOOD11 
<BR>        (and 
<BR>          (isa ?WOOD11 
<BR>            (OneOfFn 
Wood Wood-GolfClub WoodedArea ) ) 
<BR>          (and 
<BR>            (isa 
?SAWED1 SawingSomething ) 
<BR>            
(objectOfStateChange ?SAWED1 ?WOOD11 ) 
<BR>            (doneBy 
?SAWED1 ?SPEAKER ) ) ) ) ) ) )<BR><BR>e2c("I see two books on a 
shelf").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, see], [tag, z, vb]]<BR>[[txt, two], [tag, z, cd, 
'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, books], [tag, z, nns, 
'CountNoun', 'ProperCountNoun', 'ProperNoun']]<BR>[[txt, on], [tag, z, in, 
'Adverb', 'Preposition', 'Preposition-Directional-Telic', 
'Preposition-Locative', 'VerbParticle', 'WHAdverb']]<BR>[[txt, a], [tag, z, dt, 
at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 
'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 
'MassNoun-Generic']]<BR>[[txt, shelf], [tag, laast, nn, 
'CountNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('QP', 3, 4), p('PP_non_cyclic', 5, 5), p('QP', 6, 7)])<BR><BR>(thereExists 
?SPEAKER <BR>  (and <BR>    (isa ?SPEAKER Person ) 
<BR>    (and <BR>      (isa ?SEE2 Event 
) <BR>      (thereExistExactly 2 ?TWO2 
<BR>        (and 
<BR>          (and 
<BR>            (isa 
?TWO2 BookCopy ) 
<BR>            (isa 
?TWO2 Thing ) ) <BR>          (and 
<BR>            (or 
<BR>              
(awareOf ?SPEAKER ?TWO2 ) 
<BR>              
(and 
<BR>                
(isa ?SEE2 VisualPerception ) 
<BR>                
(performedBy ?SEE2 ?SPEAKER ) 
<BR>                
(perceivedThings ?SEE2 ?TWO2 ) ) ) 
<BR>            
(thereExists ?SHELF5 
<BR>              
(and 
<BR>                
(isa ?SHELF5 ShelfInABuilding ) 
<BR>                
(on-UnderspecifiedSurface ?TWO2 ?SHELF5 ) ) ) ) ) ) ) ) )<BR><BR>e2c("I see two 
books sitting on a shelf").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, see], [tag, z, vb]]<BR>[[txt, two], 
[tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, books], [tag, z, nns, 
'CountNoun', 'ProperCountNoun', 'ProperNoun']]<BR>[[txt, sitting], [tag, z, vbg, 
'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic', 
'Adjective']]<BR>[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 
'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 
'WHAdverb']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, shelf], [tag, laast, nn, 
'CountNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7, 
8)])<BR><BR>(thereExists ?SPEAKER <BR>  (and <BR>    (isa 
?SPEAKER Person ) <BR>    (and <BR>      
(isa ?SEE3 Event ) <BR>      (thereExistExactly 2 ?TWO4 
<BR>        (and 
<BR>          (and 
<BR>            (isa 
?TWO4 BookCopy ) 
<BR>            (isa 
?TWO4 SittingDown ) ) <BR>          
(and <BR>            (or 
<BR>              
(awareOf ?SPEAKER ?TWO4 ) 
<BR>              
(and 
<BR>                
(isa ?SEE3 VisualPerception ) 
<BR>                
(performedBy ?SEE3 ?SPEAKER ) 
<BR>                
(perceivedThings ?SEE3 ?TWO4 ) ) ) 
<BR>            
(thereExists ?SHELF11 
<BR>              
(and 
<BR>                
(isa ?SHELF11 ShelfInABuilding ) 
<BR>                
(on-UnderspecifiedSurface ?TWO4 ?SHELF11 ) ) ) ) ) ) ) ) )<BR><BR>e2c("I can see 
you").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, can], [tag, z, md, 'Modal', 'CountNoun']]<BR>[[txt, 
see], [tag, z, vb]]<BR>[[txt, you], [tag, laast, ppss, ppo, prp, 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 
'WHPronoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('VP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4)])<BR><BR>(thereExists 
?SPEAKER <BR>  (and <BR>    (isa ?SPEAKER Person ) 
<BR>    (and <BR>      (behavourCapable 
?SPEAKER ?SEE4 ) <BR>      (and 
<BR>        (isa ?SEE4 Event ) 
<BR>        (thereExists ?TARGETAGENT 
<BR>          (and 
<BR>            (isa 
?TARGETAGENT Person ) 
<BR>            (or 
<BR>              
(awareOf ?SPEAKER ?TARGETAGENT ) 
<BR>              
(and 
<BR>                
(isa ?SEE4 VisualPerception ) 
<BR>                
(performedBy ?SEE4 ?SPEAKER ) 
<BR>                
(perceivedThings ?SEE4 ?TARGETAGENT ) ) ) ) ) ) ) ) )<BR><BR>e2c("Fido is a 
dog").<BR><BR>[[txt, 'Fido'], [tag, staart]]<BR>[[txt, is], [tag, z, bez, vbz, 
'BeAux']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, dog], [tag, laast, nn, 
'CountNoun']]<BR><BR><BR>(implies <BR>  (properNameString ?FIDO3 "Fido" ) 
<BR>  (thereExists ?DOG8 <BR>    (and 
<BR>      (and 
<BR>        (isa ?DOG8 InsultingSomeone ) 
<BR>        (subjectOfInfo ?DOG8 :POSSESSOR ) 
) <BR>      (and 
<BR>        (isa ?IS1 Living ) 
<BR>        (occursDuring ?IS1 Now ) 
<BR>        (preActors ?IS1 ?FIDO3 ) 
<BR>        (actors ?IS1 ?DOG8 ) ) ) ) 
)<BR><BR>e2c("Who is the president of the United States of America 
?").<BR><BR>[[txt, 'Who'], [tag, staart, nnp, prp, wp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, is], [tag, z, bez, vbz, 'BeAux']]<BR>[[txt, a], [tag, z, 
dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 
'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 
'MassNoun-Generic']]<BR>[[txt, president], [tag, z, nn, 'CountNoun', 
'ProperCountNoun', 'ProperNoun', 'Adjective']]<BR>[[txt, of], [tag, z, in, 
'Preposition', 'Preposition-Of']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, 'United', 'States', of, 
'America'], [tag, z]]<BR>[[txt, ?], [tag, laast, ?, 
'Punctuation-SP']]<BR><BR><BR>(CYC-QUERY <BR>  (thereExists ?Who 
<BR>    (thereExists ?PRESIDENT46 
<BR>      (and 
<BR>        (and 
<BR>          (and 
<BR>            (isa 
?PRESIDENT46 Thing ) 
<BR>            (isa 
?PRESIDENT46 Thing ) ) 
<BR>          (isa ?PRESIDENT46 
<BR>            (OneOfFn 
PresidentOfOrganization 
<BR>              
(SubcollectionOfWithRelationFromTypeFn Person president Organization ) ) ) ) 
<BR>        (and 
<BR>          (and 
<BR>            (isa 
?IS10 Living ) 
<BR>            
(occursDuring ?IS10 Now ) 
<BR>            
(preActors ?IS10 ?Who ) 
<BR>            (actors 
?IS10 ?PRESIDENT46 ) ) 
<BR>          (thereExists ?G300312 
<BR>            (and 
<BR>              
(eq ?G300312 UnitedStatesOfAmerica ) 
<BR>              
(possessiveRelation ?G300312 ?PRESIDENT46 ) ) ) ) ) ) ) )<BR><BR>e2c("I saw 
him").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, saw], [tag, z, vbd, 'CountNoun']]<BR>[[txt, him], [tag, 
laast, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), 
p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3)])<BR><BR>(thereExists 
?SPEAKER <BR>  (and <BR>    (isa ?SPEAKER Person ) 
<BR>    (and <BR>      (isa ?SAW1 Event 
) <BR>      (thereExists ?HIM 
<BR>        (and 
<BR>          (equals ?HIM 
<BR>            
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
<BR>          (or 
<BR>            (awareOf 
?SPEAKER ?HIM ) 
<BR>            (and 
<BR>              
(isa ?SAW1 SawingSomething ) 
<BR>              
(objectOfStateChange ?SAW1 ?HIM ) 
<BR>              
(doneBy ?SAW1 ?SPEAKER ) ) 
<BR>            (and 
<BR>              
(isa ?SAW1 VisualPerception ) 
<BR>              
(performedBy ?SAW1 ?SPEAKER ) 
<BR>              
(perceivedThings ?SAW1 ?HIM ) ) ) ) ) ) ) )<BR><BR>e2c("I saw him 
Monday").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, saw], [tag, z, vbd, 'CountNoun']]<BR>[[txt, him], [tag, 
z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, 'Monday'], [tag, laast, nnp, nr, 
'CountNoun', 'ProperCountNoun', 'ProperNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 
1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 
4, 4)])<BR><BR>(thereExists ?SPEAKER <BR>  (and <BR>    (isa 
?SPEAKER Person ) <BR>    (implies 
<BR>      (occursDuring ?SAW2 Monday ) 
<BR>      (holdsIn ?SAW2 
<BR>        (and 
<BR>          (isa ?SAW2 Event ) 
<BR>          (thereExists ?HIM 
<BR>            (and 
<BR>              
(equals ?HIM 
<BR>                
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
<BR>              
(or 
<BR>                
(awareOf ?SPEAKER ?HIM ) 
<BR>                
(and 
<BR>                  
(isa ?SAW2 SawingSomething ) 
<BR>                  
(objectOfStateChange ?SAW2 ?HIM ) 
<BR>                  
(doneBy ?SAW2 ?SPEAKER ) ) 
<BR>                
(and 
<BR>                  
(isa ?SAW2 VisualPerception ) 
<BR>                  
(performedBy ?SAW2 ?SPEAKER ) 
<BR>                  
(perceivedThings ?SAW2 ?HIM ) ) ) ) ) ) ) ) ) )<BR><BR>e2c("I saw him 
January").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, saw], [tag, z, vbd, 'CountNoun']]<BR>[[txt, him], [tag, 
z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, 'January'], [tag, laast, nnp, np, 
'ProperCountNoun', 'ProperNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), 
p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 
4)])<BR><BR>(thereExists ?SPEAKER <BR>  (and <BR>    (isa 
?SPEAKER Person ) <BR>    (implies 
<BR>      (occursDuring ?SAW3 January ) 
<BR>      (holdsIn ?SAW3 
<BR>        (and 
<BR>          (isa ?SAW3 Event ) 
<BR>          (thereExists ?HIM 
<BR>            (and 
<BR>              
(equals ?HIM 
<BR>                
(PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
<BR>              
(or 
<BR>                
(awareOf ?SPEAKER ?HIM ) 
<BR>                
(and 
<BR>                  
(isa ?SAW3 SawingSomething ) 
<BR>                  
(objectOfStateChange ?SAW3 ?HIM ) 
<BR>                  
(doneBy ?SAW3 ?SPEAKER ) ) 
<BR>                
(and 
<BR>                  
(isa ?SAW3 VisualPerception ) 
<BR>                  
(performedBy ?SAW3 ?SPEAKER ) 
<BR>                  
(perceivedThings ?SAW3 ?HIM ) ) ) ) ) ) ) ) ) )<BR><BR>e2c("I saw him January 
twenty first").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, saw], [tag, z, vbd, 'CountNoun']]<BR>[[txt, him], [tag, 
z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, 'January'], [tag, z, nnp, np, 
'ProperCountNoun', 'ProperNoun']]<BR>[[txt, twenty], [tag, z, cd, 'CountNoun', 
'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, 
first], [tag, laast, jj, od, rb, 'Adjective', 'Adverb', 'CountNoun', 
'NongradableAdjective', 'OrdinalAdjective', 
'WHAdverb']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5), 
p('PP_non_cyclic', 6, 6)])<BR><BR>e2c("Monday ' s concert should be 
good").<BR><BR>[[txt, 'Monday\'s'], [txt, 'Monday', '\'s'], [txt, 'Monday'], 
[tag, staart, '\'s', 'nr$']]<BR>[[txt, concert], [tag, z, nn, 
'CountNoun']]<BR>[[txt, should], [tag, z, md, 'Modal']]<BR>[[txt, be], [tag, z, 
be, vb, 'BeAux']]<BR>[[txt, good], [tag, laast, jj, 
'Adjective']]<BR><BR><BR>e2c("We did it in Jan").<BR><BR>[[txt, 'We'], [tag, 
staart, prp, ppss, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, did], [tag, z, dod, 
vbd, 'DoAux']]<BR>[[txt, it], [tag, z, prp, pps, ppo, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 
'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 
'VerbParticle', 'WHAdverb']]<BR>[[txt, 'Jan'], [tag, laast, nnp, 
np]]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), 
p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 
5)])<BR><BR>(thereExists ?WE <BR>  (and <BR>    (equals ?WE 
<BR>      (PronounFn FirstPerson-NLAttr Plural-NLAttr 
Ungendered-NLAttr SubjectPronoun ) ) <BR>    (and 
<BR>      (and 
<BR>        (occursDurring ?IN3 ?G431374 ) 
<BR>        (bodilyDoer ?WE ?IN3 ) ) 
<BR>      (implies 
<BR>        (properNameString ?JAN68 "Jan" ) 
<BR>        (and 
<BR>          (occursDuring ?IN3 
Now ) <BR>          (holdsIn ?IN3 
<BR>            
(in-UnderspecifiedContainer ?WE ?JAN68 ) ) ) ) ) ) )<BR><BR><BR>e2c("Failure to 
comply may result in dismissal").<BR><BR>[[txt, 'Failure'], [tag, staart, nn, 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, to], [tag, z, to, in, 
'InfinitiveComp', 'Preposition', 'Preposition-Directional']]<BR>[[txt, comply], 
[tag, z, vb, 'Adjective', 'Adverb', 'WHAdverb']]<BR>[[txt, may], [tag, z, md, 
'Modal', 'ProperCountNoun', 'ProperNoun']]<BR>[[txt, result], [tag, z, nn, vb, 
'CountNoun']]<BR>[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 
'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 
'VerbParticle', 'WHAdverb']]<BR>[[txt, dismissal], [tag, laast, nn, 'CountNoun', 
'Adjective']]<BR><BR>seg([p('VP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2), 
p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), 
p('PP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])<BR><BR>(implies <BR>  
(properNameString ?FAILURE3 "Failure" ) <BR>  (and <BR>    
(and <BR>      (isa ?RESULT3 
<BR>        (AdverbFn Comply-TheWord ) ) 
<BR>      (and 
<BR>        (behavourCapable ?FAILURE3 
?RESULT3 ) <BR>        (implies 
<BR>          (and 
<BR>            (isa 
?DISMISSAL9 
<BR>              
(NounFn Dismiss-TheWord ) ) 
<BR>            
(agentPopularity ?DISMISSAL9 
<BR>              
(HighAmountFn PopularityLevel ) ) ) 
<BR>          (and 
<BR>            
(occursDuring ?RESULT3 Now ) 
<BR>            (holdsIn 
?RESULT3 
<BR>              
(eventOutcomes ?FAILURE3 ?DISMISSAL9 ) ) ) ) ) ) <BR>    (implies 
<BR>      (and 
<BR>        (isa ?G461366 Thing ) 
<BR>        (isa ?G461366 Thing ) ) 
<BR>      (to-UnderspecifiedLocation ?FAILURE3 ?G461366 
) ) ) )<BR><BR>e2c("Absence to comply may result in dismissal").<BR><BR>[[txt, 
'Absence'], [tag, staart, 'CountNoun', 'CountNoun-Generic', 'NLWordForm', 
'Noun']]<BR>[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 
'Preposition-Directional']]<BR>[[txt, comply], [tag, z, vb, 'Adjective', 
'Adverb', 'WHAdverb']]<BR>[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun', 
'ProperNoun']]<BR>[[txt, result], [tag, z, nn, vb, 'CountNoun']]<BR>[[txt, in], 
[tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 
'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 
'WHAdverb']]<BR>[[txt, dismissal], [tag, laast, nn, 'CountNoun', 
'Adjective']]<BR><BR><BR>(implies <BR>  (properNameString ?ABSENCE3 
"Absence" ) <BR>  (and <BR>    (and 
<BR>      (isa ?RESULT7 
<BR>        (AdverbFn Comply-TheWord ) ) 
<BR>      (and 
<BR>        (behavourCapable ?ABSENCE3 
?RESULT7 ) <BR>        (implies 
<BR>          (and 
<BR>            (isa 
?DISMISSAL18 
<BR>              
(NounFn Dismiss-TheWord ) ) 
<BR>            
(agentPopularity ?DISMISSAL18 
<BR>              
(HighAmountFn PopularityLevel ) ) ) 
<BR>          (and 
<BR>            
(occursDuring ?RESULT7 Now ) 
<BR>            (holdsIn 
?RESULT7 
<BR>              
(eventOutcomes ?ABSENCE3 ?DISMISSAL18 ) ) ) ) ) ) <BR>    
(implies <BR>      (and 
<BR>        (isa ?G495123 Thing ) 
<BR>        (isa ?G495123 Thing ) ) 
<BR>      (to-UnderspecifiedLocation ?ABSENCE3 ?G495123 
) ) ) )<BR><BR>e2c("He made a request that there be an 
investigation").<BR><BR>[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 
'WHPronoun']]<BR>[[txt, made], [tag, z, vbd, vbn]]<BR>[[txt, a], [tag, z, dt, 
at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 
'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 
'MassNoun-Generic']]<BR>[[txt, request], [tag, z, nn, 'CountNoun']]<BR>[[txt, 
that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 
'WHPronoun']]<BR>[[txt, there], [tag, z, ex, rb, 'Adverb', 'AdverbOfPlace', 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'There-Existential', 'WHAdverb', 'WHPronoun']]<BR>[[txt, be], 
[tag, z, be, vb, 'BeAux']]<BR>[[txt, an], [tag, z, dt, at, 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 
'WHDeterminer']]<BR>[[txt, investigation], [tag, laast, nn, 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR><BR><BR>(thereExists ?HE <BR>  (and 
<BR>    (isa ?HE Male ) <BR>    (and 
<BR>      (isa ?MADE1 Event ) 
<BR>      (thereExists ?REQUEST8 
<BR>        (and 
<BR>          (and 
<BR>            (isa 
?REQUEST8 
<BR>              
(OneOfFn InformationRequest-IBT Request Requesting-CommunicationAct ) ) 
<BR>            (isa 
?REQUEST8 Thing ) ) <BR>          
(and <BR>            (or 
<BR>              
(causes-Underspecified ?HE ?REQUEST8 ) 
<BR>              
(createdBy ?REQUEST8 ?HE ) 
<BR>              
(doneBy ?REQUEST8 ?HE ) 
<BR>              
(and 
<BR>                
(isa ?MADE1 MakingSomething ) 
<BR>                
(performedBy ?MADE1 ?HE ) 
<BR>                
(products ?MADE1 ?REQUEST8 ) ) ) 
<BR>            (and 
<BR>              
(isa ?BE29 
<BR>                
(AdverbFn There-TheWord ) ) 
<BR>              
(thereExists ?INVESTIGATION7 
<BR>                
(and 
<BR>                  
(isa ?INVESTIGATION7 Research ) 
<BR>                  
(and 
<BR>                    
(isa ?BE29 Living ) 
<BR>                    
(occursDuring ?BE29 Now ) 
<BR>                    
(preActors ?BE29 ?REQUEST8 ) 
<BR>                    
(actors ?BE29 ?INVESTIGATION7 ) ) ) ) ) ) ) ) ) ) )<BR><BR>e2c("He stated the 
fact that there be an investigation").<BR><BR>[[txt, 'He'], [tag, staart, pps, 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHPronoun']]<BR>[[txt, stated], [tag, z, vbn, vbd, 
'Adjective']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, fact], [tag, z, nn, 
'CountNoun']]<BR>[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 
'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, there], 
[tag, z, ex, rb, 'Adverb', 'AdverbOfPlace', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'There-Existential', 
'WHAdverb', 'WHPronoun']]<BR>[[txt, be], [tag, z, be, vb, 'BeAux']]<BR>[[txt, 
an], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 
'Postdeterminer', 'WHDeterminer']]<BR>[[txt, investigation], [tag, laast, nn, 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR><BR><BR>(thereExists ?HE 
<BR>  (and <BR>    (isa ?HE Male ) <BR>    
(thereExists ?FACT10 <BR>      (and 
<BR>        (ist :POSSESSOR ?FACT10 ) 
<BR>        (and 
<BR>          (implies 
<BR>            (isa 
?STATED3 
<BR>              
(VerbFn State-TheWord ) ) 
<BR>            (eventSOT 
?STATED3 ?HE ?FACT10 Past ) ) 
<BR>          (and 
<BR>            (isa 
?BE31 
<BR>              
(AdverbFn There-TheWord ) ) 
<BR>            
(thereExists ?INVESTIGATION15 
<BR>              
(and 
<BR>                
(isa ?INVESTIGATION15 Research ) 
<BR>                
(and 
<BR>                  
(isa ?BE31 Living ) 
<BR>                  
(occursDuring ?BE31 Now ) 
<BR>                  
(preActors ?BE31 ?FACT10 ) 
<BR>                  
(actors ?BE31 ?INVESTIGATION15 ) ) ) ) ) ) ) ) ) )<BR><BR><BR>e2c("Many were 
angered by the hearings").<BR><BR>[[txt, 'Many'], [tag, staart, dt, jj, nnp, 
pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 
'Adjective']]<BR>[[txt, were], [tag, z, bed, vbd, 'BeAux']]<BR>[[txt, angered], 
[tag, z, vbn, vbd, 'Adjective']]<BR>[[txt, by], [tag, z, in, 'Adverb', 
'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 
'Adjective']]<BR>[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, hearings], [tag, laast, nns, 
'CountNoun', 'GerundiveCountNoun']]<BR><BR>seg([p('QP', 1, 1), 
p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), 
p('QP', 5, 5), p('QP', 6, 6)])<BR><BR>(thereExists ?MANY <BR>  (and 
<BR>    (or <BR>      (and 
<BR>        (equals ?MANY Many-NLAttr ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
Individual NLGenQuantAttribute ) ) ) <BR>      (and 
<BR>        (equals ?MANY Many-Quant ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
Individual PositiveIntegerExtent ) ) ) <BR>      (and 
<BR>        (equals ?MANY many ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate 
TruthFunction ) ) ) ) <BR>    (and 
<BR>      (occursDurring ?ANGERED3 Past ) 
<BR>      (implies 
<BR>        (and 
<BR>          (isa ?G626264 Thing ) 
<BR>          (isa ?G626264 Thing ) 
) <BR>        (and 
<BR>          (implies 
<BR>            (isa 
?ANGERED3 
<BR>              
(VerbFn Anger-TheWord ) ) 
<BR>            (eventSOT 
?ANGERED3 ?MANY ?G626264 Past ) ) 
<BR>          (thereExists 
?HEARINGS5 
<BR>            (and 
<BR>              
(and 
<BR>                
(isa ?HEARINGS5 Hearing ) 
<BR>                
(objectActedOn ?HEARINGS5 :POSSESSOR ) ) 
<BR>              
(by-Underspecified ?G626264 ?HEARINGS5 ) ) ) ) ) ) ) )<BR><BR><BR>e2c("Many who 
initially supported Thomas later changed their minds").<BR><BR>[[txt, 'Many'], 
[tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 
'Adjective']]<BR>[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 
'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 
'WHPronoun-Subject']]<BR>[[txt, initially], [tag, z, rb, 'Adverb', 'WHAdverb', 
'Adjective']]<BR>[[txt, supported], [tag, z, vbn, vbd, 'Adjective']]<BR>[[txt, 
'Thomas'], [tag, z, np, nnp]]<BR>[[txt, later], [tag, z, rbr, rb, 'Adjective', 
'Adverb', 'AgentiveNoun', 'AdverbOfTime', 'WHAdverb']]<BR>[[txt, changed], [tag, 
z, vbn, vbd, 'Adjective', 'CountNoun']]<BR>[[txt, their], [tag, z, 'pp$', 
'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, minds], [tag, laast, 
nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 1), p('X', 2, 2), p('PP_non_cyclic', 
3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6), 
p('VP_non_cyclic', 7, 7), p('NX', 8, 9)])<BR><BR>(thereExists ?MANY <BR>  
(and <BR>    (or <BR>      (and 
<BR>        (equals ?MANY Many-NLAttr ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
Individual NLGenQuantAttribute ) ) ) <BR>      (and 
<BR>        (equals ?MANY Many-Quant ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
Individual PositiveIntegerExtent ) ) ) <BR>      (and 
<BR>        (equals ?MANY many ) 
<BR>        (isa ?MANY 
<BR>          (CollectionUnionFn 
GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate 
TruthFunction ) ) ) ) <BR>    (implies 
<BR>      (and 
<BR>        (or 
<BR>          (and 
<BR>            (equals 
?MANY Agent-PartiallyTangible ) 
<BR>            (isa 
?MANY 
<BR>              
(CollectionUnionFn Collection ExistingObjectType StuffType TemporalStuffType ) ) 
) ) <BR>        (and 
<BR>          (isa ?CHANGED1 Event 
) <BR>          (and 
<BR>            (controls 
?THEIR ?MINDS4 ) 
<BR>            (and 
<BR>              
(equals ?THEIR 
<BR>                
(PronounFn ThirdPerson-NLAttr Plural-NLAttr Ungendered-NLAttr 
PossessivePronoun-Pre ) ) 
<BR>              
(implies 
<BR>                
(and 
<BR>                  
(isa ?MINDS4 TakingCareOfSomething ) 
<BR>                  
(beneficiary ?MINDS4 :POSSESSOR ) ) 
<BR>                
(or 
<BR>                  
(and 
<BR>                    
(isa ?CHANGED1 IntrinsicStateChangeEvent ) 
<BR>                    
(performedBy ?CHANGED1 ?MANY ) 
<BR>                    
(objectOfStateChange ?CHANGED1 ?MINDS4 ) ) 
<BR>                  
(and 
<BR>                    
(isa ?CHANGED1 ReplacingAnObject ) 
<BR>                    
(objectActedOn ?CHANGED1 ?MINDS4 ) 
<BR>                    
(doneBy ?CHANGED1 ?MANY ) ) ) ) ) ) ) ) <BR>      (and 
<BR>        (isa ?SUPPORTED1 
<BR>          (AdverbFn 
Initial-TheWord ) ) <BR>        (and 
<BR>          (isa ?SUPPORTED1 
<BR>            (AdverbFn 
Late-TheWord ) ) <BR>          (and 
<BR>            (isa 
?SUPPORTED1 Event ) 
<BR>            (implies 
<BR>              
(equals ?THOMAS2 JackThomas-911FOAF ) 
<BR>              
(or 
<BR>                
(satisfiesStandard ?MANY ?THOMAS2 ) 
<BR>                
(and 
<BR>                  
(isa ?SUPPORTED1 ShowingSupportForSomeone ) 
<BR>                  
(beneficiary ?SUPPORTED1 ?THOMAS2 ) 
<BR>                  
(performedBy ?SUPPORTED1 ?MANY ) ) 
<BR>                
(and 
<BR>                  
(isa ?SUPPORTED1 SupportingSomething ) 
<BR>                  
(supportedObject ?SUPPORTED1 ?THOMAS2 ) 
<BR>                  
(supportingObject ?SUPPORTED1 ?MANY ) ) ) ) ) ) ) ) ) )<BR><BR><BR>e2c("Those 
that want to come can come").<BR><BR>[[txt, 'Those'], [tag, staart, dt, nnp, 
'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, 
that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 
'WHPronoun']]<BR>[[txt, want], [tag, z, vb, vbp, 'CountNoun']]<BR>[[txt, to], 
[tag, z, to, in, 'InfinitiveComp', 'Preposition', 
'Preposition-Directional']]<BR>[[txt, come], [tag, z, vb, vbn]]<BR>[[txt, can], 
[tag, z, md, 'Modal', 'CountNoun']]<BR>[[txt, come], [tag, laast, vb, 
vbn]]<BR><BR>seg([p('PP_non_cyclic', 1, 2), p('VP_non_cyclic', 3, 3), 
p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), 
p('VP_non_cyclic', 7, 7)])<BR><BR>(thereExists ?THOSE <BR>  (and 
<BR>    (or <BR>      (and 
<BR>        (equals ?THOSE 
Backreference-ClassB-NLAttr ) <BR>        
(isa ?THOSE <BR>          
(CollectionUnionFn Backreference-NLAttrType Individual ) ) ) 
<BR>      (and 
<BR>        (equals ?THOSE 
Demonstrative-ClassB-NLAttr ) <BR>        
(isa ?THOSE <BR>          
(CollectionUnionFn Demonstrative-NLAttrType Individual ) ) ) ) 
<BR>    (and <BR>      (eventSOT 
?EVENT88 ?THOSE ?OBJ88 ?TIME88 ) <BR>      (implies 
<BR>        (occursDuring ?WANT3 
<BR>          (OneOfFn 
ArrivingAtAPlace HavingAnOrgasm ) ) 
<BR>        (holdsIn ?WANT3 
<BR>          (implies 
<BR>            (and 
<BR>              
(isa ?G738781 Thing ) 
<BR>              
(isa ?G738781 Thing ) ) 
<BR>            (and 
<BR>              
(implies 
<BR>                
(isa ?WANT3 
<BR>                  
(VerbFn Want-TheWord ) ) 
<BR>                
(eventSOT ?WANT3 ?THOSE ?G738781 Now ) ) 
<BR>              
(implies 
<BR>                
(and 
<BR>                  
(isa ?COME4 Emission ) 
<BR>                  
(isa ?COME4 
<BR>                    
(OneOfFn Buttocks Can CanningFood ) ) ) 
<BR>                
(to-UnderspecifiedLocation ?G738781 ?COME4 ) ) ) ) ) ) ) ) )<BR><BR><BR>e2c("the 
best costumes got prizes").<BR><BR>[[txt, a], [tag, staart, dt, at, 
'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, best], [tag, z, jjt, 
jjs, 'CountNoun', 'Adjective', 'Adverb']]<BR>[[txt, costumes], [tag, z, nns, 
'CountNoun']]<BR>[[txt, got], [tag, z, vbd, vbn]]<BR>[[txt, prizes], [tag, 
laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), 
p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])<BR><BR>(thereExists 
?COSTUMES5 <BR>  (and <BR>    (and 
<BR>      (isa ?COSTUMES5 Costume ) 
<BR>      (isa ?COSTUMES5 Thing ) ) 
<BR>    (implies <BR>      (isa ?PRIZES7 
AwardPractice ) <BR>      (implies 
<BR>        (isa ?GOT7 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT7 ?COSTUMES5 
?PRIZES7 Past ) ) ) ) )<BR><BR>e2c("a best costume got prizes").<BR><BR>[[txt, 
a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 
'MassNoun', 'MassNoun-Generic']]<BR>[[txt, best], [tag, z, jjt, jjs, 
'CountNoun', 'Adjective', 'Adverb']]<BR>[[txt, costume], [tag, z, nn, 
'CountNoun']]<BR>[[txt, got], [tag, z, vbd, vbn]]<BR>[[txt, prizes], [tag, 
laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), 
p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 
5)])<BR><BR>(thereExists ?COSTUME5 <BR>  (and <BR>    (and 
<BR>      (isa ?COSTUME5 Costume ) 
<BR>      (isa ?COSTUME5 Thing ) ) 
<BR>    (implies <BR>      (isa 
?PRIZES15 AwardPractice ) <BR>      (implies 
<BR>        (isa ?GOT14 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT14 ?COSTUME5 
?PRIZES15 Past ) ) ) ) )<BR><BR>e2c("some best costumes got 
prizes").<BR><BR>[[txt, some], [tag, staart, dt, dti, 'Adverb', 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Postdeterminer', 'WHAdverb', 'WHDeterminer']]<BR>[[txt, 
best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]<BR>[[txt, 
costumes], [tag, z, nns, 'CountNoun']]<BR>[[txt, got], [tag, z, vbd, 
vbn]]<BR>[[txt, prizes], [tag, laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 
1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 
5, 5)])<BR><BR>(thereExists ?COSTUMES10 <BR>  (and <BR>    
(and <BR>      (isa ?COSTUMES10 Costume ) 
<BR>      (isa ?COSTUMES10 Thing ) ) 
<BR>    (implies <BR>      (isa 
?PRIZES23 AwardPractice ) <BR>      (implies 
<BR>        (isa ?GOT21 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT21 ?COSTUMES10 
?PRIZES23 Past ) ) ) ) )<BR><BR>e2c("the best five costumes got 
prizes").<BR><BR>[[txt, a], [tag, staart, dt, at, 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, best], [tag, z, jjt, 
jjs, 'CountNoun', 'Adjective', 'Adverb']]<BR>[[txt, five], [tag, z, cd, 
'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 
'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 
'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 
'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, costumes], [tag, z, 
nns, 'CountNoun']]<BR>[[txt, got], [tag, z, vbd, vbn]]<BR>[[txt, prizes], [tag, 
laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), 
p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 
6)])<BR><BR>(thereExistExactly 5 ?FIVE1 <BR>  (and <BR>    
(and <BR>      (isa ?FIVE1 Costume ) 
<BR>      (isa ?FIVE1 Thing ) ) <BR>    
(implies <BR>      (isa ?PRIZES31 AwardPractice ) 
<BR>      (implies 
<BR>        (isa ?GOT28 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT28 ?FIVE1 
?PRIZES31 Past ) ) ) ) )<BR><BR>e2c("best costumes got prizes").<BR><BR>[[txt, 
best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]<BR>[[txt, 
costumes], [tag, z, nns, 'CountNoun']]<BR>[[txt, got], [tag, z, vbd, 
vbn]]<BR>[[txt, prizes], [tag, laast, nns, 
'CountNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 2), 
p('VP_non_cyclic', 3, 3), p('QP', 4, 4)])<BR><BR>e2c("best five costumes got 
prizes").<BR><BR>[[txt, best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective', 
'Adverb']]<BR>[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, 
costumes], [tag, z, nns, 'CountNoun']]<BR>[[txt, got], [tag, z, vbd, 
vbn]]<BR>[[txt, prizes], [tag, laast, nns, 
'CountNoun']]<BR><BR>seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 3), 
p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])<BR><BR>(implies <BR>  (and 
<BR>    (and <BR>      (isa ?COSTUMES42 
<BR>        (NounFn Five-TheWord ) ) 
<BR>      (isa ?COSTUMES42 Costume ) ) 
<BR>    (hasEvaluativeQuantity ?COSTUMES42 
<BR>      (MediumToVeryHighAmountFn Goodness-Generic ) 
) ) <BR>  (implies <BR>    (isa ?PRIZES65 AwardPractice ) 
<BR>    (implies <BR>      (isa ?GOT45 
<BR>        (VerbFn Get-TheWord ) ) 
<BR>      (eventSOT ?GOT45 ?COSTUMES42 ?PRIZES65 Past ) 
) ) )<BR><BR>e2c("five other costumes got prizes").<BR><BR>[[txt, five], [tag, 
staart, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 
'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 
'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 
'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 
'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 
'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, other], [tag, z, jj, 
ap, 'Adjective', 'CountNoun']]<BR>[[txt, costumes], [tag, z, nns, 
'CountNoun']]<BR>[[txt, got], [tag, z, vbd, vbn]]<BR>[[txt, prizes], [tag, 
laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 1), p('PP_non_cyclic', 2, 2), 
p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 
5)])<BR><BR>(thereExistExactly 5 ?FIVE18 <BR>  (and <BR>    
(and <BR>      (and 
<BR>        (isa ?FIVE18 Costume ) 
<BR>        (isa ?FIVE18 Thing ) ) 
<BR>      (isa ?FIVE18 BIOS-OTHERSurveillanceSyndrome ) 
) <BR>    (implies <BR>      (isa 
?PRIZES73 AwardPractice ) <BR>      (implies 
<BR>        (isa ?GOT52 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT52 ?FIVE18 
?PRIZES73 Past ) ) ) ) )<BR><BR>e2c("the other five costumes got 
prizes").<BR><BR>[[txt, a], [tag, staart, dt, at, 'Determiner', 
'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 
'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, other], [tag, z, jj, ap, 
'Adjective', 'CountNoun']]<BR>[[txt, five], [tag, z, cd, 'CountNoun', 
'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 
'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 
'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 
'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 
'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR>[[txt, 
costumes], [tag, z, nns, 'CountNoun']]<BR>[[txt, got], [tag, z, vbd, 
vbn]]<BR>[[txt, prizes], [tag, laast, nns, 'CountNoun']]<BR><BR>seg([p('QP', 1, 
2), p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 
6)])<BR><BR>(thereExistExactly 5 ?FIVE19 <BR>  (and <BR>    
(and <BR>      (isa ?FIVE19 Costume ) 
<BR>      (isa ?FIVE19 Thing ) ) <BR>    
(implies <BR>      (isa ?PRIZES81 AwardPractice ) 
<BR>      (implies 
<BR>        (isa ?GOT59 
<BR>          (VerbFn Get-TheWord ) 
) <BR>        (eventSOT ?GOT59 ?FIVE19 
?PRIZES81 Past ) ) ) ) )<BR><BR>e2c("other five costumes got 
prizes").<BR><BR>(implies <BR>  (and <BR>    (and 
<BR>      (isa ?OTHER12 
<BR>        (NounFn Five-TheWord ) ) 
<BR>      (isa ?OTHER12 Costume ) ) 
<BR>    (isa ?OTHER12 BIOS-OTHERSurveillanceSyndrome ) ) 
<BR>  (implies <BR>    (isa ?PRIZES89 AwardPractice ) 
<BR>    (implies <BR>      (isa ?GOT62 
<BR>        (VerbFn Get-TheWord ) ) 
<BR>      (eventSOT ?GOT62 ?OTHER12 ?PRIZES89 Past ) ) 
) )<BR><BR><BR>e2c("some other costumes were really 
bad").<BR><BR><BR>(thereExists ?OTHER52 <BR>  (and <BR>    
(and <BR>      (and 
<BR>        (isa ?OTHER52 Costume ) 
<BR>        (isa ?OTHER52 Thing ) ) 
<BR>      (isa ?OTHER52 BIOS-OTHERSurveillanceSyndrome 
) ) <BR>    (implies <BR>      (and 
<BR>        (isa ?BAD14 
<BR>          (NounFn Real-TheWord 
) ) <BR>        (isa ?BAD14 
<BR>          (OneOfFn 
Badness-Generic Badness-Moral ) ) ) <BR>      (and 
<BR>        (isa ?WERE6 Living ) 
<BR>        (occursDuring ?WERE6 Past ) 
<BR>        (preActors ?WERE6 ?OTHER52 ) 
<BR>        (actors ?WERE6 ?BAD14 ) ) ) ) 
)</FONT></DIV>
<DIV><FONT face=Arial size=2></FONT> </DIV>
<DIV><FONT face=Arial size=2></FONT> </DIV>
<DIV><FONT face=Arial size=2></FONT><BR><FONT face=Arial size=2>English 
Parser<BR></FONT>
<DIV>
<FORM method=get>
<P><TEXTAREA name=english cols=80>I drank the arabian coffee .</TEXTAREA><BR><INPUT type=submit value="Parse Normally" name=submit><FONT 
face=Arial size=2> </FONT><INPUT type=submit value="Parse with idiomatics" name=submit><FONT 
face=Arial size=2> <INPUT type=checkbox value=CHECKED name=findall> Show 
All<BR></FONT></P></FORM><FONT face=Arial size=2>Please wait..<BR></FONT><TEXTAREA name=debug rows=5 wrap=off cols=80>?- e2c("I drank the arabian coffee .").

substPos([nn, nnp, surroundtag, dt, nn], [[txt, arabian], 4:4, 1.0-nn, 0.85-nn, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], nn, nnp, [[txt, arabian], 4:4, 1.0-nnp, 0.85-nnp, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz])
substPos([nnp, jj, surroundtag, dt, nn], [[txt, arabian], 4:4, 1.0-nnp, 0.85-nnp, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], nnp, jj, [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz])
[[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns]
[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']
[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp]
[[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz]
[[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']
[[txt, '.'], 6:6, 1.0-'.', 1.0-'.', 0.8-'.', 0.2-'Punctuation-SP']


seg(thing, 'PRONOUN', ['I'], [[[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns]])
seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']])
seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']])
seg(sym, 'SYM', ['.'], [[[txt, '.'], 6:6, 1.0-'.', 1.0-'.', 0.8-'.', 0.2-'Punctuation-SP']])


seg(thing, 'PRONOUN', ['I'], [[[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns]])
seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']])
seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']])


theObject(_G25115, 'Hypothetic-I', ['I'])
seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']])
seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']])


theObject(_G25115, 'Hypothetic-I', ['I'])
seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']])
theObject(_G25405, 'Hypothetic-The-Arabian-Coffee', [the, arabian, coffee])


theObject('Action', 'Hypothetic-Drank', [drank])
theObject(_G25115, 'Hypothetic-I', ['I'])


theObject(_G25115, 'Hypothetic-I', ['I'])




</TEXTAREA><BR>
<FORM action=assert.moo method=get>
<TABLE border=1>
  <TBODY>
  <TR>
    <TH><FONT face=Arial size=2>Assertion</TR> </FONT>
  <TR>
    <TD noWrap><TEXTAREA name=cycl rows=20 wrap=off cols=80>(and 
  (situationConstituents Hypothetic-GenitiveFrame Hypothetic-I) 
  (subEvents Hypothetic-GenitiveFrame Hypothetic-Drank) 
  (actors Hypothetic-Drank Hypothetic-The-Arabian-Coffee) 
  (preActors Hypothetic-Drank Hypothetic-I) 
  (isa Hypothetic-Drank DrinkingEvent) 
  (performedBy Hypothetic-Drank Hypothetic-I) 
  (primaryObjectMoving Hypothetic-Drank Hypothetic-I) 
  (objectMoving Hypothetic-Drank Hypothetic-I) 
  (consumedObject Hypothetic-Drank Hypothetic-The-Arabian-Coffee) 
  (isa Hypothetic-Drank Event) 
  (isa Hypothetic-Drank Situation) 
  (termStrings Hypothetic-Drank "drank") 
  (occursDuring Hypothetic-Drank 
    (IntervalBeforeFn Now AnIndefiniteAmountOfTime)) 
  (isa Hypothetic-The-Arabian-Coffee Individual) 
  (isa Hypothetic-The-Arabian-Coffee SomethingExisting) 
  (termStrings Hypothetic-The-Arabian-Coffee "the arabian coffee") 
  (isa Hypothetic-The-Arabian-Coffee Coffee-Ground) 
  (isa Hypothetic-The-Arabian-Coffee Coffee-Beverage) 
  (equals Hypothetic-The-Arabian-Coffee ArabianPeninsula) 
  (isa Hypothetic-The-Arabian-Coffee ArabianHorse) 
  (conceptuallyRelated Hypothetic-The-Arabian-Coffee ArabianPeninsula) 
  (isa Hypothetic-I Individual) 
  (properNameStrings Hypothetic-I "I") 
  (equals Hypothetic-I 
    (PronounFn FirstPerson-NLAttr Singular-NLAttr Ungendered-NLAttr SubjectPronoun)) 
  (isa Hypothetic-I SomethingExisting) 
  (termStrings Hypothetic-I "I") 
  (equals Hypothetic-I Hypothetic-I) 
  (isa Hypothetic-GenitiveFrame Event))
</TEXTAREA><FONT face=Arial size=2> </FONT></TD></TR></TBODY></TABLE><BR><INPUT type=submit value="Assert Now" name=assert><BR></FORM>
<FORM action=english.moo method=post><INPUT type=hidden 
value="I drank the arabian coffee ." name=english><FONT face=Arial size=2> 
</FONT>
<TABLE border=1>
  <CAPTION><FONT face=Arial size=2>['Hypothetic-I', 
  'Hypothetic-The-Arabian-Coffee', 'Hypothetic-Drank']</FONT></CAPTION>
  <TBODY>
  <TR>
    <TH><FONT face=Arial size=2>Variable Quantification<BR>Or Constant Name 
      </FONT>
    <TH><FONT face=Arial size=2>Refactoring To Customize The Assertion 
      (Persistent)</TR> </FONT>
  <TR>
    <TD noWrap>
      <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize 
      name="skolem('Hypothetic-I')">Hypothetic-I</INPUT><BR> <INPUT 
      type=radio value=find-or-create-constant 
      name="skolem('Hypothetic-I')"></FONT><INPUT value=Hypothetic-I2 
      name="constant('Hypothetic-I')"></INPUT><FONT face=Arial size=2> 
      </FONT></P>
    <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>
  <TR>
    <TD noWrap>
      <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize 
      name="skolem('Hypothetic-The-Arabian-Coffee')">Hypothetic-The-Arabian-Coffee</INPUT><BR> <INPUT 
      type=radio value=find-or-create-constant 
      name="skolem('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT 
      value=Hypothetic-The-Arabian-Coffee2 
      name="constant('Hypothetic-The-Arabian-Coffee')"></INPUT><FONT face=Arial 
      size=2> </FONT></P>
    <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>
  <TR>
    <TD noWrap>
      <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize 
      name="skolem('Hypothetic-Drank')">Hypothetic-Drank</INPUT><BR> <INPUT 
      type=radio value=find-or-create-constant 
      name="skolem('Hypothetic-Drank')"></FONT><INPUT value=Hypothetic-Drank2 
      name="constant('Hypothetic-Drank')"></INPUT><FONT face=Arial size=2> 
      </FONT></P>
    <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>
  <TR>
    <TD noWrap><FONT face=Arial size=2></FONT>
    <TD noWrap><PRE><FONT face=Arial size=2><INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (situationConstituents Hypothetic-GenitiveFrame Hypothetic-I)<BR> T
<INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (subEvents Hypothetic-GenitiveFrame Hypothetic-Drank)<BR> T
<INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (actors Hypothetic-Drank Hypothetic-The-Arabian-Coffee)<BR> T
<INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (preActors Hypothetic-Drank Hypothetic-I)<BR> T
<INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (isa Hypothetic-Drank DrinkingEvent)<BR> T
<INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), performedBy(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (performedBy Hypothetic-Drank Hypothetic-I)<BR> "Formula 
  (#$performedBy #$Hypothetic-Drank #$Hypothetic-I) 
was not well formed because: 
Term #$Hypothetic-I violates arg-isa #$Agent-Generic
applicable to argument 2 of relation #$performedBy
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates arg-isa #$Agent-Generic
applicable to argument 2 of relation #$performedBy
(via #$deliberateActors)
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates arg-isa #$Agent-Generic
applicable to argument 2 of relation #$performedBy
(via #$awareOf)
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
"
<INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), primaryObjectMoving(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (primaryObjectMoving Hypothetic-Drank Hypothetic-I)<BR> "Formula 
  (#$primaryObjectMoving #$Hypothetic-Drank #$Hypothetic-I) 
was not well formed because: 
Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing
applicable to argument 2 of relation #$primaryObjectMoving
when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing
applicable to argument 2 of relation #$primaryObjectMoving
(via #$objectMoving)
when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing
applicable to argument 2 of relation #$primaryObjectMoving
when argument 1, #$Hypothetic-Drank, isa #$FluidFlow-Translation
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates arg-isa #$SpatialThing
applicable to argument 2 of relation #$primaryObjectMoving
(via #$objectMoving)
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates arg-isa #$PartiallyTangible
applicable to argument 2 of relation #$primaryObjectMoving
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
"
<INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), objectMoving(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (objectMoving Hypothetic-Drank Hypothetic-I)<BR> "Formula 
  (#$objectMoving #$Hypothetic-Drank #$Hypothetic-I) 
was not well formed because: 
Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing
applicable to argument 2 of relation #$objectMoving
when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
Term #$Hypothetic-I violates arg-isa #$SpatialThing
applicable to argument 2 of relation #$objectMoving
in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
"
<INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans])." type=checkbox CHECKED name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, TransitiveNPFrame, and(isa(Hypothetic-Drank, DrinkingEvent), performedBy(Hypothetic-Drank, Hypothetic-I), consumedObject(Hypothetic-Drank, Hypothetic-The-Arabian-Coffee)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans]))"><FONT face=Arial size=2> (consumedObject Hypothetic-Drank Hypothetic-The-Arabian-Coffee)<BR> T
<INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (isa Hypothetic-Drank Event)<BR> T
<INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (isa Hypothetic-Drank Situation)<BR> T
<INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (termStrings Hypothetic-Drank "drank")<BR> T
<INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (occursDuring Hypothetic-Drank 
      (IntervalBeforeFn Now AnIndefiniteAmountOfTime))<BR> T
<INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Individual)<BR> T
<INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee SomethingExisting)<BR> T
<INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (termStrings Hypothetic-The-Arabian-Coffee "the arabian coffee")<BR> T
<INPUT title="textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType'])." type=checkbox CHECKED name="accepted(textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([coffee], [denotation, Coffee-Ground, TangibleStuffCompositionType, ArtifactTypeByGenericCategory, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType])" name="offered(textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Coffee-Ground)<BR> T
<INPUT title="textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType'])." type=checkbox CHECKED name="accepted(textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([coffee], [denotation, Coffee-Beverage, DefaultDisjointEdibleStuffType, TangibleStuffCompositionType, StuffType, Collection, TemporalStuffType])" name="offered(textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Coffee-Beverage)<BR> T
<INPUT title="textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual'])." type=checkbox CHECKED name="accepted(textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual']))"></FONT><INPUT type=hidden value="textCached([arabian], [denotation, ArabianPeninsula, Peninsula, SpatialThing-Localized, Individual])" name="offered(textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual']))"><FONT face=Arial size=2> (equals Hypothetic-The-Arabian-Coffee ArabianPeninsula)<BR> T
<INPUT title="textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType'])." type=checkbox name="accepted(textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([arabian], [denotation, ArabianHorse, BiologicalSubspecies, StuffType, Collection, TemporalStuffType])" name="offered(textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee ArabianHorse)<BR> "Formula 
  (#$isa #$Hypothetic-The-Arabian-Coffee #$ArabianHorse) 
was not well formed because: 
#$Hypothetic-The-Arabian-Coffee is known not to be an instance of #$ArabianHorse in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.  
sbhl conflict: (#$isa #$Hypothetic-The-Arabian-Coffee #$ArabianHorse) TRUE #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;
      because: (#$isa #$Hypothetic-The-Arabian-Coffee #$Coffee-Beverage) True-JustificationTruth               
(#$genls #$Coffee-Beverage #$Drink) TRUE               
(#$genls #$Drink #$LiquidTangibleThing) TRUE               
(#$genls #$LiquidTangibleThing #$FluidTangibleThing) TRUE               
(#$disjointWith #$FluidTangibleThing #$Agent-PartiallyTangible) TRUE               
(#$genls #&lt;(#$CollectionUnionFn (#$TheSet #$Person #$Animal))&gt; #$Agent-PartiallyTangible) TRUE               
(#$genls #$Animal #&lt;(#$CollectionUnionFn (#$TheSet #$Person #$Animal))&gt;) TRUE               
(#$genls #$NonHumanAnimal #$Animal) TRUE               
(#$genls #$EquineAnimal #$NonHumanAnimal) TRUE               
(#$genls #$Horse #$EquineAnimal) TRUE               
(#$genls #$Horse-Domesticated #$Horse) TRUE               
(#$genls #$ArabianHorse #$Horse-Domesticated) TRUE

"
<INPUT title="textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans])." type=checkbox name="accepted(textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans]))"></FONT><INPUT type=hidden value="textCached(Arabian-TheWord, [frame, Arabian-TheWord, Adjective, RegularAdjFrame, conceptuallyRelated(Hypothetic-The-Arabian-Coffee, ArabianPeninsula), adjSemTrans])" name="offered(textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans]))"><FONT face=Arial size=2> (conceptuallyRelated Hypothetic-The-Arabian-Coffee ArabianPeninsula)<BR> "Formula 
  (#$conceptuallyRelated #$Hypothetic-The-Arabian-Coffee #$ArabianPeninsula) 
was not well formed because: 
(#$isa #$conceptuallyRelated #$IrreflexiveBinaryPredicate) in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;
"
<INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (isa Hypothetic-I Individual)<BR> T
<INPUT title=captialized1. type=checkbox name=accepted(captialized1)></FONT><INPUT type=hidden value=captialized1 name=offered(captialized1)><FONT face=Arial size=2> (properNameStrings Hypothetic-I "I")<BR> "Formula 
  (#$properNameStrings #$Hypothetic-I \"I\") 
was not well formed because: 
Asserting a literal with predicate #$properNameStrings is prohibited in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.
"
<INPUT title="textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic'])." type=checkbox CHECKED name="accepted(textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic']))"></FONT><INPUT type=hidden value="textCached([I], [denotation, nart([PronounFn, FirstPerson-NLAttr, Singular-NLAttr, Ungendered-NLAttr, SubjectPronoun]), IndexicalConcept, Person, SpatialThing-Localized, Individual, Agent-Generic])" name="offered(textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic']))"><FONT face=Arial size=2> (equals Hypothetic-I 
      (PronounFn FirstPerson-NLAttr Singular-NLAttr Ungendered-NLAttr SubjectPronoun))<BR> T
<INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (isa Hypothetic-I SomethingExisting)<BR> T
<INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (termStrings Hypothetic-I "I")<BR> T
<INPUT title="textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual'])." type=checkbox CHECKED name="accepted(textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual']))"></FONT><INPUT type=hidden value="textCached([I], [denotation, Hypothetic-I, SomethingExisting, Individual])" name="offered(textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual']))"><FONT face=Arial size=2> (equals Hypothetic-I Hypothetic-I)<BR> T
<INPUT title="'Hypothetic-GenitiveFrame'." type=checkbox CHECKED name="accepted('Hypothetic-GenitiveFrame')"></FONT><INPUT type=hidden value=Hypothetic-GenitiveFrame name="offered('Hypothetic-GenitiveFrame')"><FONT face=Arial size=2> (isa Hypothetic-GenitiveFrame Event)<BR> T
</FONT></PRE></TD></TR></TBODY></TABLE><BR><INPUT value=NLTESTMT 
name=profile><FONT face=Arial size=2> </FONT><INPUT type=submit value="Save Profile" name=review></FORM>
<P><FONT face=Arial size=2></FONT> </P></DIV></DIV></BODY></HTML>